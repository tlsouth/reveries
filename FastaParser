package lab4;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

public class FastaSequence
{
	//initializing empty StringBuffers to which the headers and sequences will be added to
	private StringBuffer header = new StringBuffer();
	private StringBuffer sequence = new StringBuffer();
	
	
	public static List<FastaSequence> readFastaFile(String filepath) throws Exception
	{
		//create new ArrayList of objects FastaSequence
		List<FastaSequence> list = new ArrayList <FastaSequence>();
		//read file
		BufferedReader reader = new BufferedReader(new FileReader(new File(filepath)));
		//move lines
		String nextLine = reader.readLine();
		
		//while there is a next line
		while(nextLine != null)
		{
			//new FastaSequence object fs
			FastaSequence fs = new FastaSequence();
			//using the characteristics > to identify header lines
			if(nextLine.startsWith(">"))
			{
				//removes the > from the header (this could have also been done in the getHeader method)
				nextLine = nextLine.replaceAll(">", "");
				//append the header to the header StringBuffer
				fs.header.append(nextLine);
			}
			//add content to fs
			list.add(fs);
			//move lines
			nextLine = reader.readLine();
			
			//this loop allows us to append multiple lines of sequences that all comprise one sequence
			while(nextLine != null && ! nextLine.startsWith(">"))
			{
				//adds the sequence to the sequence in the line above it given that there is no header separating them; this means both lines make up a sequence
				fs.sequence.append(nextLine);
				//move lines
				nextLine = reader.readLine();
			}
		}
		//closes reader and returns the list containing the FastaSequence objects with the headers and sequences
		reader.close();
		return list;
	}
	
	//overrides the toString method to return the headers and sequences in a way that is easy to read
	@Override
	public String toString()
	{
		return  header + " " + sequence;
	}
	
	//getHeader method which returns the header of the sequence
	public String getHeader()
	{
		//sets the header to a string variable and returns it
		String head = header.toString();
		return head;
	}
	
	//getSequence method which returns the sequence
	public String getSequence()
	{
		//sets sequence to a string and returns it
		String seq = sequence.toString();
		return seq;
	}
	
	//method for getting the gc ratio
	public float getGCRatio()

	{
		//initializes counters for each base
		float cCounter = 0;
		float gCounter = 0;
		//loop that iterates through the length of the sequence
		for(int x = 0; x < sequence.length(); x++)
		{
			//conditional statements that increase the respective counter if C or G is encountered
			if(sequence.charAt(x) == 'C')
			{
				cCounter++;
			}
			if(sequence.charAt(x) == 'G')
			{
				gCounter++;
			}
		}
		//returns the total ratio
		return (gCounter + cCounter) / sequence.length();
	}
	
	//the following four methods get counts for each base so they can be added to the table
	public int aCount()
	{
		int aCounter = 0;
		for(int x = 0; x < sequence.length(); x++)
		{
			if(sequence.charAt(x) == 'A')
			{
				aCounter++;
			}
		}
		return aCounter;
	}
	
	public int tCount()
	{
		int tCounter = 0;
		for(int x = 0; x < sequence.length(); x++)
		{
			if(sequence.charAt(x) == 'T')
			{
				tCounter++;
			}
		}
		return tCounter;
	}
	
	public int cCount()
	{
		int cCounter = 0;
		for(int x = 0; x < sequence.length(); x++)
		{
			if(sequence.charAt(x) == 'C')
			{
				cCounter++;
			}
		}
		return cCounter;
	}
	
	public int gCount()
	{
		int gCounter = 0;
		for(int x = 0; x < sequence.length(); x++)
		{
			if(sequence.charAt(x) == 'G')
			{
				gCounter++;
			}
		}
		return gCounter;
	}
	
	//method for creating the table given the list and output file path
	public static void writeTableSummary( List<FastaSequence> list, File outputFile) throws Exception
	{
		//giving writer the path
		BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
		//setting up the columns of the table
		writer.write("sequenceID\tnumA\tnumC\tnumG\tnumT\tsequence\n");
		
		//loop to iterate through each header and sequence in the list
		for(FastaSequence fs : list)
		{
			//writes each required element into the proper column in the table using tabs and newlines
			//file can be successfully opened in excel and matches the example given in lab powerpoint
			writer.write(fs.getHeader() + "\t" + 
			fs.aCount() + "\t" + 
			fs.cCount() + "\t" + 
			fs.gCount() + "\t" + 
			fs.tCount() + "\t" + 
			fs.getSequence() + "\n");
		}
		//closing writer
		writer.flush();
		writer.close();
	}

	//main method
	public static void main(String[] args) throws Exception
	{
		//gives file path for the fastafile to be read in
	    List<FastaSequence> fastaList = FastaSequence.readFastaFile("FASTA FILE PATH");
	    //loop to iterate through each header and sequence in the list
	     for( FastaSequence fs : fastaList)
	     {
	    	 	//printing results of three methods
	         System.out.println(fs.getHeader());
	         System.out.println(fs.getSequence());
	         System.out.println(fs.getGCRatio());
	     }
	     //file path for output file
	     File myFile = new File("OUTPUT FILE PATH");
	     //calling on the writeTableSummary method to generate table of sequence data
	     writeTableSummary(fastaList, myFile);
	     //prints the list of FastaSequence objects
	    System.out.println(fastaList);
	}


}
