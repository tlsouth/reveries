package lab6;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Semaphore;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

public class RedGUI extends JFrame
{
	private static final long serialVersionUID = 1975L;
	
	private JTextField input = new JTextField();
	private JTextArea output = new JTextArea();
	private JScrollPane outScroll = new JScrollPane(output);
	//wrapping in a JLabel: https://stackoverflow.com/questions/1090098/newline-in-jlabel/1090112#1090112
	private JLabel directions = new JLabel("<html>Enter an integer below, select the number of threads, and press start!<html>", SwingConstants.CENTER);
	private JButton start = new JButton("Start");
	private JButton cancel = new JButton("Cancel");
	private JLabel time = new JLabel("", SwingConstants.CENTER);
	private JTextField progress = new JTextField();
	String threadOptions[] = {"1", "2", "3", "4", "5"};
	private final JComboBox<String> threadCount = new JComboBox<String>(threadOptions);
	
	private boolean isCancel = false;
	
	private static int workers = 3;
	
//	private static class Worker implements Runnable
//	{
//		Semaphore semph = new Semaphore(workers);
//		
//		semph.acquire();
//		semph.release();
//		
//		public void run()
//		{
//			try
//			{
//				
//			}
//		}
//	}

	private class StartListener implements ActionListener
	{
		public void actionPerformed(ActionEvent arg0)
		{
			isCancel = false;
			start.setEnabled(false);
			cancel.setEnabled(true);
			new Thread(new StartActionRunnable()).start();
		}
	}
	
	private class CancelListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			//actually need code here to display all the prime numbers found, and a count of how many there are
//			output.setText("There are " + numPrimes + " prime numbers, including: " + sPrimes);
			isCancel = true;
		}
	}
	
//	public class threadCountListener implements ActionListener
//	{
//		public void actionPerformed(ActionEvent e)
//		{
//			int numThreads = (int) threadCount.getSelectedItem();
//			directions.setText(String.valueOf(numThreads));
//			System.out.println(numThreads);
//			validate();
//		}
//	}
	
	private class StartActionRunnable implements Runnable
	{
		public void run()
		{
			try
			{
				int userNum = Integer.parseInt(input.getText());
				
				List<Integer> primes = new ArrayList<>();
				List<Integer> nonPrimes = new ArrayList<>();
				
				int i = 2;
				
				long startTime = System.currentTimeMillis();
				
				while(!isCancel && i < userNum)
				{
					boolean checkPrime = true;
					
					for(int x = 2; x < i; x++)
					{
						if(i%x == 0)
						{
							checkPrime = false;
//							nonPrimes.add(i);
							break;
						}
					}
					if(checkPrime)
					{
						primes.add(i);
					}
					progress.setText("Checking number " + i + " of " + userNum);
					
					long current = (System.currentTimeMillis() - startTime) / 1000;
//					long totalTime = (current - startTime) / 1000;
					time.setText(current + " seconds passed.");
					
					i++;
					updateProgress(i);
//					String sPrimes = primes.toString();
//					int numPrimes = primes.size();
					output.setText("There are " + primes.size() + " prime numbers, including:\n");
//					for(Integer x: primes)
//					{
//						output.append(x + "\n");
//					}

					for(Integer x: primes)
					{
						output.append(x + "\n");
					}
				}

			}
			catch(Exception ex)
			{
				input.setText(ex.getMessage());
				ex.printStackTrace();
			}
			
			try
			{
				SwingUtilities.invokeLater(new Runnable()
				{
					public void run()
					{
						start.setEnabled(true);
						cancel.setEnabled(false);
					}
				});
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	
	private void updateProgress(Integer text)
	{
		String prog = "";
		prog = text.toString();
		progress.setText(prog);
		validate();
	}
	
	private JPanel timeBar()
	{
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(2, 0));
		panel.add(threadCount);
		panel.add(time);
		return panel;
	}
	
	private JPanel inputTime()
	{
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(2, 0));
		panel.add(input);
		panel.add(timeBar());
		return panel;
	}
	
	private JPanel north()
	{
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(2, 0));
		panel.add(directions);
		panel.add(inputTime());
		
		return panel;
		
	}
	
	private JPanel center()
	{
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(2, 0));
		panel.add(progress);
		progress.setEditable(false);
		panel.add(outScroll);
		output.setLineWrap(true);
		output.setWrapStyleWord(true);
		output.setEditable(false);
		return panel;
	}
	
	private JPanel south()
	{
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(0, 2));
		panel.add(start);
		panel.add(cancel);
		
		start.addActionListener(new StartListener());
		cancel.addActionListener(new CancelListener());
		
		return panel;
	}

	public RedGUI()
	{
		super("Slow asf");
		setLocationRelativeTo(null);
		setSize(400, 400);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		getContentPane().add(north(), BorderLayout.NORTH);
		getContentPane().add(center(), BorderLayout.CENTER);
		getContentPane().add(south(), BorderLayout.SOUTH);
		start.addActionListener(new StartListener());
		cancel.addActionListener(new CancelListener());
		setVisible(true);
	}

	
	public static void main(String[] args)
	{
		new RedGUI();
	}
}
